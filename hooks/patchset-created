#!/bin/sh

# Gerrit captures only stdout
exec 2>&1

die() {
    local m="$1"
    echo "FATAL: ${m}" >&2
    exit 1
}

[ -n "${GERRIT_SITE}" ] || die "Please set GERRIT_SITE"

project_transform() {
    local project="$1"
    echo "${project}"
}

. "${GERRIT_SITE}/etc/checks-mock.conf" || die "Cannot read configuration '${GERRIT_SITE}/etc/checks-mock.conf'"

[ -n "${GERRIT_CHECKS_MOCK_URL_PREFIX}" ] || die "GERRIT_CHECKS_MOCK_URL_PREFIX is missing"
[ -n "${GERRIT_CHECKS_REF_PREFIX}" ] || die "GERRIT_CHECKS_REF_PREFIX is missing"

while [ -n "$1" ]; do
    case "$1" in
        --project)
            PROJECT="$2"
            shift 2
            ;;
        --change)
            CHANGE="$2"
            shift 2
            ;;
        --patchset)
            REVISION="$2"
            shift 2
            ;;
        --commit)
            COMMIT="$2"
            shift 2
            ;;
        --*)
            shift 2
            ;;
        *)
            break
            ;;
    esac
done

[ -n "${PROJECT}" ] || die "Cannot parse project"
[ -n "${CHANGE}" ] || die "Cannot parse change"
[ -n "${REVISION}" ] || die "Cannot parse patchset"
[ -n "${COMMIT}" ] || die "Cannot parse commit"

# Gerrit uses '~' as separator which is illegal in refspec
# As it URL encode the parts, we can use '#' as replacement
CHANGE="$(echo "${CHANGE}" | sed 's/~/#/g')"

REF="${COMMIT}:refs/heads/${GERRIT_CHECKS_REF_PREFIX}/${CHANGE}/${REVISION}"
REPO="${GERRIT_CHECKS_MOCK_URL_PREFIX}/$(project_transform "${PROJECT}")"
echo "checks-mock-hook: pushing '${REF}' into ${REPO}"
git push --force "${REPO}" "${REF}" || die "Failed to push to ${REPO}"

exit 0
